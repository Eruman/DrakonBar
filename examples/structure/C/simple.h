/* Autogenerated with DRAKON Editor 1.23 */
#ifndef SIMPLE_H72361
#define SIMPLE_H72361

#include "lib.h"

typedef struct simple simple;
typedef struct employee employee;
typedef int (*employee_fun)(employee* item, void* user_data /* null */);


simple* /* own */
simple_create(void);


void
simple_destroy(simple* me /* own. null */);


int
simple_error(const simple* db);


int
employee_id(const employee* me);


employee* /* null */
simple_get_employee(simple* db,
    int rec_id);


string8* /* null */
employee_name(employee* me);


const string8* /* null */
employee_cget_name(const employee* me);


void
employee_set_name(employee* me,
    string8* value /* own. null */);


int
employee_type(const employee* me);


void
employee_set_type(employee* me,
    int value);


int* /* null */
employee_ext(const employee* me);


void
employee_set_ext(employee* me,
    int* value /* null */);


employee* /* null */
simple_insert_employee(simple* db,
    string8* name /* own. null */,
    int type);


int
simple_delete_employee(simple* db,
    employee* record /* null */);


int
simple_employee_count(const simple* db);


int
simple_foreach_employee(simple* db,
    employee_fun visitor,
    void* user_data /* null */);






int main(
    int argc,
    char** argv
);


#endif

