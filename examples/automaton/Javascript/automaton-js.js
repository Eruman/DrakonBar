"use strict";


var AutoDemo = {};

(function(ns, undefined) { // Begin of namespace

var TT_NUMBER = "number";
var TT_OPERATOR = "operator";
var TT_IDENTIFIER = "identifier";

var Lex = {
	initialized: false
};


// Autogenerated with DRAKON Editor 1.25
var Lexer_state_idle = {};
var Lexer_state_identifier = {};
var Lexer_state_number = {};
var Lexer_state_operator = {};

function Lexer_CleanUp(self, data, c) {
    
}

function Lexer_identifier_digit(self, data, c) {
    // item 60
    add_char(data, c);
    // item 63
    self.state = Lexer_state_identifier;
}

function Lexer_identifier_letter(self, data, c) {
    // item 59
    add_char(data, c);
    // item 62
    self.state = Lexer_state_identifier;
}

function Lexer_identifier_operator(self, data, c) {
    // item 276
    create_identifier(data);
    // item 61
    add_char(data, c);
    // item 64
    self.state = Lexer_state_operator;
}

function Lexer_identifier_whitespace(self, data, c) {
    // item 65
    create_identifier(data);
    // item 31
    self.state = Lexer_state_idle;
}

function Lexer_idle_digit(self, data, c) {
    // item 45
    add_char(data, c);
    // item 48
    self.state = Lexer_state_number;
}

function Lexer_idle_letter(self, data, c) {
    // item 44
    add_char(data, c);
    // item 47
    self.state = Lexer_state_identifier;
}

function Lexer_idle_operator(self, data, c) {
    // item 46
    add_char(data, c);
    // item 49
    self.state = Lexer_state_operator;
}

function Lexer_idle_whitespace(self, data, c) {
    // item 23
    self.state = Lexer_state_idle;
}

function Lexer_number_digit(self, data, c) {
    // item 77
    add_char(data, c);
    // item 80
    self.state = Lexer_state_number;
}

function Lexer_number_dummy(self, data, c) {
    // item 81
    self.state = Lexer_state_operator;
}

function Lexer_number_letter(self, data, c) {
    // item 76
    add_char(data, c);
    // item 79
    self.state = Lexer_state_number;
}

function Lexer_number_operator(self, data, c) {
    // item 83
    create_number(data);
    // item 78
    add_char(data, c);
    // item 81
    self.state = Lexer_state_operator;
}

function Lexer_number_whitespace(self, data, c) {
    // item 82
    create_number(data);
    // item 34
    self.state = Lexer_state_idle;
}

function Lexer_operator_digit(self, data, c) {
    // item 101
    create_operator(data);
    // item 94
    add_char(data, c);
    // item 97
    self.state = Lexer_state_number;
}

function Lexer_operator_letter(self, data, c) {
    // item 100
    create_operator(data);
    // item 93
    add_char(data, c);
    // item 96
    self.state = Lexer_state_identifier;
}

function Lexer_operator_operator(self, data, c) {
    // item 103
    if (try_make_long_op(data, c)) {
        // item 106
        self.state = Lexer_state_idle;
    } else {
        // item 107
        create_operator(data);
        // item 95
        add_char(data, c);
        // item 98
        self.state = Lexer_state_operator;
    }
}

function Lexer_operator_whitespace(self, data, c) {
    // item 99
    create_operator(data);
    // item 26
    self.state = Lexer_state_idle;
}

function add_char(data, c) {
    // item 348
    data.current.push(c);
}

function array_to_string(chars) {
    // item 366
    var result = "";
    // item 3640001
    var _ind364 = 0;
    var _col364 = chars;
    var _keys364 = Object.keys(_col364); 
    var _len364 = _keys364.length;
    while (true) {
        // item 3640002
        if (_ind364 < _len364) {
            
        } else {
            break;
        }
        // item 3640004
        var char = _col364[_keys364[_ind364]];
        // item 367
        result = result + String.fromCharCode(char);
        // item 3640003
        _ind364++;
    }
    // item 368
    return result;
}

function create_identifier(data) {
    // item 126
    create_token(data, TT_IDENTIFIER);
}

function create_number(data) {
    // item 237
    create_token(data, TT_NUMBER);
}

function create_operator(data) {
    // item 239
    create_token(data, TT_OPERATOR);
}

function create_token(data, type) {
    // item 132
    if (data.current.length === 0) {
        
    } else {
        // item 349
        var text = data.current;
        data.current = [];
        // item 350
        var token = token_create(type, text);
        data.tokens.push(token);
    }
}

function first_char(text) {
    // item 379
    return text.charCodeAt(0);
}

function is_digit(c) {
    // item 301
    if ((c >= Lex.ZERO) && (c <= Lex.NINE)) {
        // item 309
        return true;
    } else {
        // item 310
        return false;
    }
}

function is_letter(c) {
    // item 286
    if ((c >= Lex.A) && (c <= Lex.Z)) {
        // item 294
        return true;
    } else {
        // item 290
        if ((c >= Lex.CA) && (c <= Lex.CZ)) {
            // item 294
            return true;
        } else {
            // item 295
            return false;
        }
    }
}

function is_long_op(first, second) {
    // item 3520001
    var _ind352 = 0;
    var _col352 = Lex.LONG_OPS;
    var _keys352 = Object.keys(_col352); 
    var _len352 = _keys352.length;
    while (true) {
        // item 3520002
        if (_ind352 < _len352) {
            
        } else {
            // item 258
            return false;
        }
        // item 3520004
        var long_op = _col352[_keys352[_ind352]];
        // item 251
        if (long_op.charCodeAt(0) === first) {
            // item 373
            if (long_op.charCodeAt(1) === second) {
                // item 257
                return true;
            } else {
                
            }
        } else {
            
        }
        // item 3520003
        _ind352++;
    }
}

function is_operator(c) {
    // item 194
    if (Lex.OP_CHARS[c]) {
        // item 197
        return true;
    } else {
        // item 193
        return false;
    }
}

function lex_init() {
    // item 266
    if (Lex.initialized) {
        
    } else {
        // item 265
        Lex.OP_CHARS = [];
        Lex.LONG_OPS = ["==", "!=", "<=", ">=" ];
        Lex.initialized = true;
        // item 2780001
        var i = 0;
        while (true) {
            // item 2780002
            if (i < 256) {
                
            } else {
                break;
            }
            // item 280
            Lex.OP_CHARS[i] = false;
            // item 2780003
            i++;
        }
        // item 269
        Lex.OP_CHARS[first_char("!")] = true;
        Lex.OP_CHARS[first_char("=")] = true;
        Lex.OP_CHARS[first_char("<")] = true;
        Lex.OP_CHARS[first_char(">")] = true;
        Lex.OP_CHARS[first_char("-")] = true;
        Lex.OP_CHARS[first_char("+")] = true;
        Lex.OP_CHARS[first_char("/")] = true;
        Lex.OP_CHARS[first_char("\\")] = true;
        Lex.OP_CHARS[first_char("*")] = true;
        Lex.OP_CHARS[first_char("%")] = true;
        Lex.OP_CHARS[first_char("(")] = true;
        Lex.OP_CHARS[first_char(")")] = true;
        Lex.OP_CHARS[first_char("(")] = true;
        Lex.OP_CHARS[first_char(")")] = true;
        Lex.OP_CHARS[first_char("{")] = true;
        Lex.OP_CHARS[first_char("}")] = true;
        Lex.OP_CHARS[first_char(":")] = true;
        Lex.OP_CHARS[first_char(".")] = true;
        Lex.OP_CHARS[first_char("#")] = true;
        Lex.OP_CHARS[first_char(",")] = true;
        Lex.OP_CHARS[first_char("^")] = true;
        Lex.OP_CHARS[first_char("|")] = true;
        Lex.OP_CHARS[first_char("&")] = true;
        Lex.OP_CHARS[first_char("'")] = true;
        Lex.OP_CHARS[first_char("\"")] = true;
        // item 351
        Lex.ZERO = first_char("0");
        Lex.NINE = first_char("9");
        Lex.A = first_char("a");
        Lex.Z = first_char("z");
        Lex.CA = first_char("A");
        Lex.CZ = first_char("Z");
        Lex.UNDER = first_char("_");
        Lex.SPACE = first_char(" ");
    }
}

ns.main = function() {
    // item 346
    lex_init();
    // item 161
    var text = "foo.Bar(34 / 4-(18+m * 3)) ==800";
    var tokens = tokenize(text);
    // item 207
    printHeader("Text to parse");
    printLine(text);
    printHeader("Tokens");
    // item 381
    addHTML("<table id='table1'></table>");
    addTableLine("table1", "th", "Token type", "Token text");
    // item 3570001
    var _ind357 = 0;
    var _col357 = tokens;
    var _keys357 = Object.keys(_col357); 
    var _len357 = _keys357.length;
    while (true) {
        // item 3570002
        if (_ind357 < _len357) {
            
        } else {
            break;
        }
        // item 3570004
        var token = _col357[_keys357[_ind357]];
        // item 206
        token_print(token);
        // item 3570003
        _ind357++;
    }
}

function token_create(type, chars) {
    // item 353
    var token = {
    	type: type,
    	text: array_to_string(chars)
    };
    // item 354
    return token;
}

function token_print(token) {
    // item 386
    addTableLine(
    	"table1",
    	"td",
    	token.type,
    	token.text
    );
}

function tokenize(text) {
    // item 315
    var data = {
    	current: [],
    	tokens: []
    };
    // item 167
    var lexer = new Lexer();
    // item 1680001
    var i = 0;
    while (true) {
        // item 1680002
        if (i < text.length) {
            
        } else {
            break;
        }
        // item 319
        var c = text.charCodeAt(i);
        // item 172
        if (c === Lex.UNDER) {
            // item 181
            lexer.letter(data, c);
        } else {
            // item 175
            if (is_letter(c)) {
                // item 181
                lexer.letter(data, c);
            } else {
                // item 178
                if (is_digit(c)) {
                    // item 312
                    lexer.digit(data, c);
                } else {
                    // item 183
                    if (is_operator(c)) {
                        // item 313
                        lexer.operator(data, c);
                    } else {
                        // item 356
                        lexer.whitespace(data, Lex.SPACE);
                    }
                }
            }
        }
        // item 1680003
        i++;
    }
    // item 358
    lexer.whitespace(data, Lex.SPACE);
    // item 170
    return data.tokens;
}

function try_make_long_op(data, c) {
    // item 154
    var previous = data.current[0];
    // item 155
    if (is_long_op(previous, c)) {
        // item 158
        data.current = [];
        var text = [ previous, c ];
        var token = token_create(TT_OPERATOR, text);
        data.tokens.push(token);
        // item 159
        return true;
    } else {
        // item 160
        return false;
    }
}
Lexer_state_idle.digit = Lexer_idle_digit;
Lexer_state_idle.dummy = function() {};
Lexer_state_idle.letter = Lexer_idle_letter;
Lexer_state_idle.operator = Lexer_idle_operator;
Lexer_state_idle.whitespace = Lexer_idle_whitespace;
Lexer_state_idle.state_name = "idle";
Lexer_state_identifier.digit = Lexer_identifier_digit;
Lexer_state_identifier.dummy = function() {};
Lexer_state_identifier.letter = Lexer_identifier_letter;
Lexer_state_identifier.operator = Lexer_identifier_operator;
Lexer_state_identifier.whitespace = Lexer_identifier_whitespace;
Lexer_state_identifier.state_name = "identifier";
Lexer_state_number.digit = Lexer_number_digit;
Lexer_state_number.dummy = Lexer_number_dummy;
Lexer_state_number.letter = Lexer_number_letter;
Lexer_state_number.operator = Lexer_number_operator;
Lexer_state_number.whitespace = Lexer_number_whitespace;
Lexer_state_number.state_name = "number";
Lexer_state_operator.digit = Lexer_operator_digit;
Lexer_state_operator.dummy = function() {};
Lexer_state_operator.letter = Lexer_operator_letter;
Lexer_state_operator.operator = Lexer_operator_operator;
Lexer_state_operator.whitespace = Lexer_operator_whitespace;
Lexer_state_operator.state_name = "operator";
function Lexer() {
  this.type_name = "Lexer";
  this.state = Lexer_state_idle;
  this.digit = function(data, c) {
    this.state.digit(this, data, c);
  }
  this.dummy = function(data, c) {
    this.state.dummy(this, data, c);
  }
  this.letter = function(data, c) {
    this.state.letter(this, data, c);
  }
  this.operator = function(data, c) {
    this.state.operator(this, data, c);
  }
  this.whitespace = function(data, c) {
    this.state.whitespace(this, data, c);
  }
}

})(AutoDemo); // End of namespace

AutoDemo.main();
