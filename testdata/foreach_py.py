# Autogenerated with DRAKON Editor 1.5

def main():
        #item 37
    print_list_arrow([ "one", "two", "three" ])
    print("")
    print_list_for([ "four", "six", "eight"])
    print("")
    print_list_foreach([ "eleven", "twenty", "hundred" ])
    return None
    


def print_list_arrow(collection):
    _next_item_ = 17
    while True:
        if _next_item_ == 17:
            length = len(collection)
            i = 0
            _next_item_ = 18
    
        if _next_item_ == 18:
            if i < length:
                #item 15
                item = collection[i]
                print(item)
                #item 20
                i += 1
                _next_item_ = 18
                continue
            else:
                return None
    


def print_list_for(collection):
    _next_item_ = 28
    while True:
        if _next_item_ == 28:
            length = len(collection)
            #item 290001
            i = 0
            _next_item_ = 290002
    
        if _next_item_ == 290002:
            if i < length:
                #item 31
                item = collection[i]
                print(item)
                #item 290003
                i += 1
                _next_item_ = 290002
                continue
            else:
                return None
    


def print_list_foreach(collection):
    _next_item_ = 60001
    while True:
        if _next_item_ == 60001:
            _it6 = iter(collection)
            try:
                item = _it6.next()
                _go6 = True
            except StopIteration:
                _go6 = False
            _next_item_ = 60002
    
        if _next_item_ == 60002:
            if _go6:
                #item 7
                print(item)
                #item 60003
                try:
                    item = _it6.next()
                    _go6 = True
                except StopIteration:
                    _go6 = False
                _next_item_ = 60002
                continue
            else:
                return None
    

main()
